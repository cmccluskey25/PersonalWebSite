@{
    ViewBag.Title = "Home Page";
}
<div id="border">
    @*<div id="screen"></div>*@
    <div id="masker1">

        <div id="whiteCircle"></div>
    </div>
    <div id="copy1Container">
        <div id="copy1" class="hidden"><div class="stagger-up">Caroline </div><div class="stagger-up">McCluskey</div><div class="stagger-up">Senior Web Developer</div></div>
        <div id="copy2Container" class="hidden">
            <div id="copyDynamic"></div>
            <div id="copy2"><div>Years</div><div>Development</div><div>Experience</div></div>
        </div>
        <div id="copy3Container" class="hidden">
            <div id="copyDynamic2"></div>
            <div id="copy3"><div>Years</div><div>Web</div><div>Experience</div></div>
        </div>
        <div id="chart" ><svg></svg></div>
        
    </div>
   
    <div id="test"></div>

</div>
<script>

    var bubbleChart = function () {
        var width = 960,
            height = 960,
            maxRadius = 6,
            columnForColors = "category",
            columnForRadius = "level",
            strength=-50;
        var centerX = width * 0.5;
        var centerY = height * 0.5;

        var forceCollide = d3.forceCollide(function (d) { return d.r + 1 });

        function chart(selection) {
            //var data = selection.enter().data();
            var data = selection.datum();
            var div = selection,
                svg = div.selectAll('svg');
            svg.attr('width', width).attr('height', height);

            var tooltip = selection
                .append("div")
                .style("position", "absolute")
                .style("visibility", "hidden")
                .style("color", "white")
                .style("padding", "8px")
                .style("background-color", "#626D71")
                .style("border-radius", "6px")
                .style("text-align", "center")
                .style("font-family", "monospace")
                .style("width", "400px")
                .text("");


            var simulation = d3.forceSimulation(data)
                .force("charge", d3.forceManyBody().strength(strength))
                .force('collide', forceCollide)
                //.force('center', d3.forceCenter(centerX, centerY))
                .force("x", d3.forceX())
                .force("y", d3.forceY())
                .on("tick", ticked);

            //var simulation = d3.forceSimulation()
            //    // .force('link', d3.forceLink().id(d => d.id))
            //    .force('charge', d3.forceManyBody())
            //    //.force('collide', forceCollide)
            //    // .force('center', d3.forceCenter(centerX, centerY))
            //    .force('x', d3.forceX(centerX).strength(strength))
            //    .force('y', d3.forceY(centerY).strength(strength));

            var colorCircles = d3.scaleOrdinal(d3.schemeCategory10);
            var scaleRadius = d3.scaleLinear().domain([d3.min(data, function (d) {
                return +d[columnForRadius];
            }), d3.max(data, function (d) {
                return +d[columnForRadius];
            })]).range([5, 18])

            var node = svg.selectAll("circle")
                .data(data)
                .enter()
                .append("circle")
                .attr('r', function (d) {
                    return scaleRadius(d[columnForRadius])
                })
                .style("fill", function (d) {
                    //return colorCircles(d[columnForColors])
                    return "red"
                })
                .attr('transform', 'translate(' + [width / 2, height / 2] + ')');


            function ticked(e) {
                node.attr("cx", function (d) {
                    return d.x;
                })
                    .attr("cy", function (d) {
                        return d.y;
                    });
            }

        }

        chart.width = function (value) {
            if (!arguments.length) { return width; }
            width = value;

            return chart;
        }
        chart.height = function (value) {
            if (!arguments.length) { return height; }
            height = value;

            return chart;
        }

        return chart;
    }

    eventOne();

    function numbersToChange(_startString, _num, _endString) {
        var container = document.getElementById('copyDynamic');
        container.innerHTML = _startString + _num + _endString;

    }

    function numbersToChange2(_startString, _num, _endString) {
        var container = document.getElementById('copyDynamic2');
        container.innerHTML = _startString + _num + _endString;

    }

   

    function eventOne() {
        //var tl = new TimelineMax();
        //var blocker = document.getElementById("screen");
        //var masker1 = document.getElementById("masker1");
        //var copy1Container = document.getElementById('copy1Container');
        //var copy2Container = document.getElementById('copy2Container');
        //var copy3Container = document.getElementById('copy3Container');
        //var copy1lines = document.getElementById('copy1');
        //var copy2lines = document.getElementById('copy2');
        //var copy3lines = document.getElementById('copy3');
        //var copyDynamic2 = document.getElementById('copyDynamic2');
        //var test = document.getElementById('test');
        //tl.to(blocker, .01, { opacity: 0 });
        //tl.from(masker1, 1.2, { css: { left: "50%", top: "50%", width: "0px", height: "0px" }, ease: Back.easeInOut }, 0.2);
        ////tl.from(copy1Container, .25, { css: { top: "+=50px", opacity: "0" } }, 3.5)
        //////tl.staggerFrom('.stagger-up', .5, { css: { top: "+=25px", opacity: "0" }, ease: Strong.easeOut }, 0.1)
        //tl.staggerFrom('.stagger-up', .5, { css: { y: "100", opacity: "0" }, ease: Strong.easeOut }, 0.1);
        //tl.to(masker1, .5, { css: { left: "50%", top: "50%", width: "1px", height: "1px" }, ease: Back.easeIn }, 3);
        ////tl.to(copy1lines, .5, { opacity: 0 }, 2.5)
        ////tl.to(copy1lines, .5, { visibility:hidden}, 2.5)
        //tl.call(function () {
        //    $('#copy1').addClass("hidden");
        //}, null, null, 2);
        //tl.call(function () {
        //    $('#copy2Container').removeClass("hidden");
        //}, null, null, 2);
        ////tl.set(copy2Container,{ autoalpha:1, display: block })
        ////tl.from(copyDynamic, .25, { css: { top: "+=50px", opacity: "0" } }, 3.4)
        ////tl.from(copy2lines, .25, { css: { top: "+=50px", opacity: "0" } }, 3.5)
        //tl.from(copyDynamic, .25, { css: { y: "50", opacity: "0" } }, 3.4)
        //tl.from(copy2lines, .25, { css: { y: "50", opacity: "0" } }, 3.5)
        //for (var i = 0; i <= 15; i++) {
        //    tl.call(numbersToChange, ["", i, ""]);
        //    tl.add(TweenLite.delayedCall(.1, numbersToChange, ["", i, ""]));
        //}
        //tl.to(copyDynamic, .25, { opacity: 0 }, 6);
        //tl.to(copy2lines, .25, { opacity: 0 }, 6);

        //tl.to(masker1, 1.2, { css: { width: "600%", height: "auto", left: "-150%", top: " -150%" }, ease: Back.easeInOut });
        //tl.call(function () {
        //    $('#copy2Container').addClass("hidden");
        //}, null, null);
        //tl.call(function () {
        //    $('#copy3Container').removeClass("hidden");
        //}, null, null);

        //tl.from(copyDynamic2, .25, { css: { y: "50", opacity: "0" } })
        //tl.from(copy3lines, .25, { css: { y: "50", opacity: "0" } })
        //for (var i = 0; i <= 8; i++) {
        //    tl.call(numbersToChange2, ["", i, ""]);
        //    tl.add(TweenLite.delayedCall(.1, numbersToChange2, ["", i, ""]));
        //}
        //tl.to(copyDynamic2, .25, { opacity: 0 }, 6);
        //tl.to(copy3lines, .25, { opacity: 0 }, 6);

        //tl.to(masker1, .5, { css: { left: "50%", top: "50%", width: "1px", height: "1px" }, ease: Back.easeIn }, 3);
        //tl.call(function () {
        //    $('#copy3Container').addClass("hidden");
        //}, null, null);
        //tl.call(function () {
        //    $('#chart').removeClass("hidden");
        //}, null, null);

        d3.csv('../skills.csv', function (error, data) {
            if (error) {
                console.error('Error getting or parsing the data.');
                throw error;
            }

            var selection = d3.select('#chart').datum(data);
           // var mydata = selection.enter().data();
            //var mydata = selection.datum();
            //selection.select("svg")
            //    .selectAll("circle")
            //    .data(mydata)
            //    .enter()
            //    .append("circle");;
            
           
            //var div = d3.select("#chart")
            //    .select("svg")
            //    .selectAll("circle")
            //    .data(data)
            //    .enter()
            //    .append("circle");
            createBubble(data);
        });

       
       

    }

    function splitText(phrase) {
        var prevLetter, sentence,
            sentence = phrase.split("");
        $.each(sentence, function (index, val) {
            if (val === " ") {
                val = "&nbsp;";
            }
            var letter = $("<div/>", {
                id: "txt" + index
            }).addClass('txt').html(val).appendTo(txtContainer);

            if (prevLetter) {
                $(letter).css("left", ($(prevLetter).position().left + $(letter).width()) + "px");
            };
            prevLetter = letter;
        });
        txt = $(".txt");
    }

   

    function createBubble(data) {
        
        var chart = bubbleChart().width(600).height(400);
        d3.select('#chart').datum(data).call(chart);
    }
</script>